//
// ContractAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RxSwift
#if canImport(AnyCodable)
import AnyCodable
#endif

extension OpenAPIClientAPI {


open class ContractAPI {

    /**
     Collection size
     
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter collectionId: (query)  
     - parameter projectId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func contractControllerCollectionSize(authorization: String, collectionId: String, projectId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = contractControllerCollectionSizeWithRequestBuilder(authorization: authorization, collectionId: collectionId, projectId: projectId).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Collection size
     
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter collectionId: (query)  
     - parameter projectId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func contractControllerCollectionSize(authorization: String, collectionId: String, projectId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return contractControllerCollectionSizeWithRequestBuilder(authorization: authorization, collectionId: collectionId, projectId: projectId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Collection size
     - GET /v1/contract/collection-size
     - Get size of collection
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter collectionId: (query)  
     - parameter projectId: (query)  
     - returns: RequestBuilder<Void> 
     */
    open class func contractControllerCollectionSizeWithRequestBuilder(authorization: String, collectionId: String, projectId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/contract/collection-size"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "collection_id": (wrappedValue: collectionId.encodeToJSON(), isExplode: true),
            "project_id": (wrappedValue: projectId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get Contract URI
     
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter collectionId: (query)  
     - parameter projectId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func contractControllerContractUri(authorization: String, collectionId: String, projectId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = contractControllerContractUriWithRequestBuilder(authorization: authorization, collectionId: collectionId, projectId: projectId).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Get Contract URI
     
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter collectionId: (query)  
     - parameter projectId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func contractControllerContractUri(authorization: String, collectionId: String, projectId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return contractControllerContractUriWithRequestBuilder(authorization: authorization, collectionId: collectionId, projectId: projectId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Contract URI
     - GET /v1/contract/contract-uri
     - Gets contract uri of contract
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter collectionId: (query)  
     - parameter projectId: (query)  
     - returns: RequestBuilder<Void> 
     */
    open class func contractControllerContractUriWithRequestBuilder(authorization: String, collectionId: String, projectId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/contract/contract-uri"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "collection_id": (wrappedValue: collectionId.encodeToJSON(), isExplode: true),
            "project_id": (wrappedValue: projectId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update Contract URI
     
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter setContractUriDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func contractControllerSetContractUri(authorization: String, setContractUriDto: SetContractUriDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = contractControllerSetContractUriWithRequestBuilder(authorization: authorization, setContractUriDto: setContractUriDto).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Update Contract URI
     
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter setContractUriDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func contractControllerSetContractUri(authorization: String, setContractUriDto: SetContractUriDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return contractControllerSetContractUriWithRequestBuilder(authorization: authorization, setContractUriDto: setContractUriDto).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Update Contract URI
     - PUT /v1/contract/contract-uri
     - Update Contract URI
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter setContractUriDto: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func contractControllerSetContractUriWithRequestBuilder(authorization: String, setContractUriDto: SetContractUriDto) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/contract/contract-uri"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setContractUriDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update Sale status
     
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter setSaleStatusDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func contractControllerSetSaleStatus(authorization: String, setSaleStatusDto: SetSaleStatusDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = contractControllerSetSaleStatusWithRequestBuilder(authorization: authorization, setSaleStatusDto: setSaleStatusDto).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Update Sale status
     
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter setSaleStatusDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func contractControllerSetSaleStatus(authorization: String, setSaleStatusDto: SetSaleStatusDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return contractControllerSetSaleStatusWithRequestBuilder(authorization: authorization, setSaleStatusDto: setSaleStatusDto).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Update Sale status
     - PUT /v1/contract/sale-status
     - Update Sale status to PAUSED, PRE_SALE or PUBLIC
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter setSaleStatusDto: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func contractControllerSetSaleStatusWithRequestBuilder(authorization: String, setSaleStatusDto: SetSaleStatusDto) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/contract/sale-status"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setSaleStatusDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
}
