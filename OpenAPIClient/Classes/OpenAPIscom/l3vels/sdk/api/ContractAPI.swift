//
// ContractAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RxSwift
#if canImport(AnyCodable)
import AnyCodable
#endif

extension OpenAPIClientAPI {


open class ContractAPI {

    /**
     Collection size
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter collectionId: (query)  
     - parameter gameId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func countContractsByGameId(authorization: String, collectionId: String, gameId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = countContractsByGameIdWithRequestBuilder(authorization: authorization, collectionId: collectionId, gameId: gameId).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Collection size
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter collectionId: (query)  
     - parameter gameId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func countContractsByGameId(authorization: String, collectionId: String, gameId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return countContractsByGameIdWithRequestBuilder(authorization: authorization, collectionId: collectionId, gameId: gameId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Collection size
     - GET /v1/contract/collection-size
     - Count total contract in game.
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter collectionId: (query)  
     - parameter gameId: (query)  
     - returns: RequestBuilder<Void> 
     */
    open class func countContractsByGameIdWithRequestBuilder(authorization: String, collectionId: String, gameId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/contract/collection-size"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "collection_id": (wrappedValue: collectionId.encodeToJSON(), isExplode: true),
            "game_id": (wrappedValue: gameId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get Contract URI
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter collectionId: (query)  
     - parameter gameId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func getContractURI(authorization: String, collectionId: String, gameId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = getContractURIWithRequestBuilder(authorization: authorization, collectionId: collectionId, gameId: gameId).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Get Contract URI
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter collectionId: (query)  
     - parameter gameId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func getContractURI(authorization: String, collectionId: String, gameId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return getContractURIWithRequestBuilder(authorization: authorization, collectionId: collectionId, gameId: gameId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Contract URI
     - GET /v1/contract/contract-uri
     - Gets contract uri of contract
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter collectionId: (query)  
     - parameter gameId: (query)  
     - returns: RequestBuilder<Void> 
     */
    open class func getContractURIWithRequestBuilder(authorization: String, collectionId: String, gameId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/contract/contract-uri"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "collection_id": (wrappedValue: collectionId.encodeToJSON(), isExplode: true),
            "game_id": (wrappedValue: gameId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update Contract URI
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter setContractUriInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func setContractURI(authorization: String, setContractUriInput: SetContractUriInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = setContractURIWithRequestBuilder(authorization: authorization, setContractUriInput: setContractUriInput).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Update Contract URI
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter setContractUriInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func setContractURI(authorization: String, setContractUriInput: SetContractUriInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return setContractURIWithRequestBuilder(authorization: authorization, setContractUriInput: setContractUriInput).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Update Contract URI
     - PUT /v1/contract/contract-uri
     - Update Contract URI
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter setContractUriInput: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func setContractURIWithRequestBuilder(authorization: String, setContractUriInput: SetContractUriInput) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/contract/contract-uri"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setContractUriInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update Sale status
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter setSaleStatusInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func updateSaleStatus(authorization: String, setSaleStatusInput: SetSaleStatusInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = updateSaleStatusWithRequestBuilder(authorization: authorization, setSaleStatusInput: setSaleStatusInput).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Update Sale status
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter setSaleStatusInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func updateSaleStatus(authorization: String, setSaleStatusInput: SetSaleStatusInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return updateSaleStatusWithRequestBuilder(authorization: authorization, setSaleStatusInput: setSaleStatusInput).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Update Sale status
     - PUT /v1/contract/sale-status
     - Update Sale status to PAUSED, PRE_SALE or PUBLIC
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter setSaleStatusInput: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func updateSaleStatusWithRequestBuilder(authorization: String, setSaleStatusInput: SetSaleStatusInput) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/contract/sale-status"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setSaleStatusInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
}
