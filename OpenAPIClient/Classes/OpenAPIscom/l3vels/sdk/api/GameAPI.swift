//
// GameAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RxSwift
#if canImport(AnyCodable)
import AnyCodable
#endif

extension OpenAPIClientAPI {


open class GameAPI {

    /**
     Retrieve Game
     
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter id: (path) Game or Project Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Project>
     */
    open class func projectControllerProjectById(authorization: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Project> {
        return Observable.create { observer -> Disposable in
            let requestTask = projectControllerProjectByIdWithRequestBuilder(authorization: authorization, id: id).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    observer.onNext(response.body)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Retrieve Game
     
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter id: (path) Game or Project Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func projectControllerProjectById(authorization: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Project, ErrorResponse>) -> Void)) -> RequestTask {
        return projectControllerProjectByIdWithRequestBuilder(authorization: authorization, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Retrieve Game
     - GET /v1/game/{id}
     - Get game/project by ID created on the platform.
     - parameter authorization: (header) API key is associated with multiple projects. Please include it in to use developers API. 
     - parameter id: (path) Game or Project Id 
     - returns: RequestBuilder<Project> 
     */
    open class func projectControllerProjectByIdWithRequestBuilder(authorization: String, id: String) -> RequestBuilder<Project> {
        var localVariablePath = "/v1/game/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
}
