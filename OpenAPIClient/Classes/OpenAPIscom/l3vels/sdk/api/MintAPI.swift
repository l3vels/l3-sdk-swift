//
// MintAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RxSwift
#if canImport(AnyCodable)
import AnyCodable
#endif

extension OpenAPIClientAPI {


open class MintAPI {

    /**
     Airdrop asset to player
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func airdropAssetToPlayer(authorization: String, mintInput: MintInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = airdropAssetToPlayerWithRequestBuilder(authorization: authorization, mintInput: mintInput).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Airdrop asset to player
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func airdropAssetToPlayer(authorization: String, mintInput: MintInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return airdropAssetToPlayerWithRequestBuilder(authorization: authorization, mintInput: mintInput).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Airdrop asset to player
     - POST /v1/mint/airdrop
     - Airdrop asset to player
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintInput: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func airdropAssetToPlayerWithRequestBuilder(authorization: String, mintInput: MintInput) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/mint/airdrop"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mintInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Award asset to player
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func awardAssetToPlayer(authorization: String, mintInput: MintInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = awardAssetToPlayerWithRequestBuilder(authorization: authorization, mintInput: mintInput).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Award asset to player
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func awardAssetToPlayer(authorization: String, mintInput: MintInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return awardAssetToPlayerWithRequestBuilder(authorization: authorization, mintInput: mintInput).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Award asset to player
     - POST /v1/mint/award
     - Award asset to player
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintInput: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func awardAssetToPlayerWithRequestBuilder(authorization: String, mintInput: MintInput) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/mint/award"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mintInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Batch mint assets by player
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintBatchInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func batchMintAssetByPlayer(authorization: String, mintBatchInput: MintBatchInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = batchMintAssetByPlayerWithRequestBuilder(authorization: authorization, mintBatchInput: mintBatchInput).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Batch mint assets by player
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintBatchInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func batchMintAssetByPlayer(authorization: String, mintBatchInput: MintBatchInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return batchMintAssetByPlayerWithRequestBuilder(authorization: authorization, mintBatchInput: mintBatchInput).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Batch mint assets by player
     - POST /v1/mint/batch-player
     - Batch mint assets by player. Player must have enough balance to mint.
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintBatchInput: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func batchMintAssetByPlayerWithRequestBuilder(authorization: String, mintBatchInput: MintBatchInput) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/mint/batch-player"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mintBatchInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Mint asset
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func mintAsset(authorization: String, mintInput: MintInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = mintAssetWithRequestBuilder(authorization: authorization, mintInput: mintInput).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Mint asset
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func mintAsset(authorization: String, mintInput: MintInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return mintAssetWithRequestBuilder(authorization: authorization, mintInput: mintInput).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Mint asset
     - POST /v1/mint
     - Mint an asset by admin to player
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintInput: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func mintAssetWithRequestBuilder(authorization: String, mintInput: MintInput) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/mint"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mintInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Mint asset by player
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func mintAssetByPlayer(authorization: String, mintInput: MintInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = mintAssetByPlayerWithRequestBuilder(authorization: authorization, mintInput: mintInput).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Mint asset by player
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func mintAssetByPlayer(authorization: String, mintInput: MintInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return mintAssetByPlayerWithRequestBuilder(authorization: authorization, mintInput: mintInput).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Mint asset by player
     - POST /v1/mint/player
     - Mint asset by player. Player must have enough balance to mint.
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintInput: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func mintAssetByPlayerWithRequestBuilder(authorization: String, mintInput: MintInput) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/mint/player"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mintInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Batch mint assets
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintBatchInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func mintBatchAsset(authorization: String, mintBatchInput: MintBatchInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            let requestTask = mintBatchAssetWithRequestBuilder(authorization: authorization, mintBatchInput: mintBatchInput).execute(apiResponseQueue) { result in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            
            return Disposables.create {
                requestTask.cancel()
            }
        }
    }

    /**
     Batch mint assets
     
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintBatchInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func mintBatchAsset(authorization: String, mintBatchInput: MintBatchInput, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, ErrorResponse>) -> Void)) -> RequestTask {
        return mintBatchAssetWithRequestBuilder(authorization: authorization, mintBatchInput: mintBatchInput).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Batch mint assets
     - POST /v1/mint/batch
     - Batch mint assets by admin to player
     - parameter authorization: (header) API key is associated with multiple games. Please include it in to use developers API. 
     - parameter mintBatchInput: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func mintBatchAssetWithRequestBuilder(authorization: String, mintBatchInput: MintBatchInput) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/mint/batch"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mintBatchInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
}
