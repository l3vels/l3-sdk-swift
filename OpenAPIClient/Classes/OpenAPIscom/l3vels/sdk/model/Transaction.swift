//
// Transaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "OpenAPIClientAPI.Transaction")
public typealias Transaction = OpenAPIClientAPI.Transaction

extension OpenAPIClientAPI {

public struct Transaction: Codable, JSONEncodable, Hashable {

    /** The unique identifier for the transaction entity. */
    public var id: String
    /** Transaction status in Blockchain. Can be pending, success or fail */
    public var status: String
    /** Address of the sender of the transaction. */
    public var from: String
    /** Address of the receiver of the transaction. It can be contract address or player address if it is a transfer transaction. */
    public var to: String
    /** Contract ID the transaction is associated with. */
    public var contractId: String
    /** Contract address where the transaction happened. */
    public var contractAddress: String
    /** Main blockchain identifier: Ethereum, Polygon, etc. */
    public var blockchain: String
    /** Chain name identifier: Ethereum, Goerli, Sepolia, PolygonPoS, etc. */
    public var chainName: String
    /** Chain ID: 1 for Ethereum, 5 for Goerli, 80001 for Polygon Mumbai, etc. */
    public var chainId: Double
    /** Chain environment: Testnet, Mainnet, etc. */
    public var environment: String
    /** Unique transaction hash in the blockchain. */
    public var transactionHash: String
    /** Unique block number in the blockchain. */
    public var blockNumber: Double
    /** Transaction type: Mint, Transfer, Award, Airdrop, etc. */
    public var type: String
    /** Function method name that was called in smart contract */
    public var method: String
    /** List of events that were emitted in the transaction */
    public var events: [String]
    /** The unique identifier of the project that the transaction is associated with. This allows developers to organize their transactions by project and helps with tracking and reporting. */
    public var projectId: String
    /** The unique identifier of the collection that the transaction is associated with. This allows developers to organize their transactions by project and helps with tracking and reporting. */
    public var collectionId: String
    /** The unique identifier of the account that the transaction belongs to. */
    public var accountId: Double
    /** The date when the collection was created. */
    public var createdOn: Date
    /** The date when the collection was last modified. */
    public var modifiedOn: Date
    /** The Id of the user who created the collection. */
    public var createdBy: Double
    /** The Id of the user who last modified the collection. */
    public var modifiedBy: Double

    public init(id: String, status: String, from: String, to: String, contractId: String, contractAddress: String, blockchain: String, chainName: String, chainId: Double, environment: String, transactionHash: String, blockNumber: Double, type: String, method: String, events: [String], projectId: String, collectionId: String, accountId: Double, createdOn: Date, modifiedOn: Date, createdBy: Double, modifiedBy: Double) {
        self.id = id
        self.status = status
        self.from = from
        self.to = to
        self.contractId = contractId
        self.contractAddress = contractAddress
        self.blockchain = blockchain
        self.chainName = chainName
        self.chainId = chainId
        self.environment = environment
        self.transactionHash = transactionHash
        self.blockNumber = blockNumber
        self.type = type
        self.method = method
        self.events = events
        self.projectId = projectId
        self.collectionId = collectionId
        self.accountId = accountId
        self.createdOn = createdOn
        self.modifiedOn = modifiedOn
        self.createdBy = createdBy
        self.modifiedBy = modifiedBy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case status
        case from
        case to
        case contractId = "contract_id"
        case contractAddress = "contract_address"
        case blockchain
        case chainName = "chain_name"
        case chainId = "chain_id"
        case environment
        case transactionHash = "transaction_hash"
        case blockNumber = "block_number"
        case type
        case method
        case events
        case projectId = "project_id"
        case collectionId = "collection_id"
        case accountId = "account_id"
        case createdOn = "created_on"
        case modifiedOn = "modified_on"
        case createdBy = "created_by"
        case modifiedBy = "modified_by"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(status, forKey: .status)
        try container.encode(from, forKey: .from)
        try container.encode(to, forKey: .to)
        try container.encode(contractId, forKey: .contractId)
        try container.encode(contractAddress, forKey: .contractAddress)
        try container.encode(blockchain, forKey: .blockchain)
        try container.encode(chainName, forKey: .chainName)
        try container.encode(chainId, forKey: .chainId)
        try container.encode(environment, forKey: .environment)
        try container.encode(transactionHash, forKey: .transactionHash)
        try container.encode(blockNumber, forKey: .blockNumber)
        try container.encode(type, forKey: .type)
        try container.encode(method, forKey: .method)
        try container.encode(events, forKey: .events)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(collectionId, forKey: .collectionId)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(createdOn, forKey: .createdOn)
        try container.encode(modifiedOn, forKey: .modifiedOn)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(modifiedBy, forKey: .modifiedBy)
    }
}

}
