//
// Collection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "OpenAPIClientAPI.Collection")
public typealias Collection = OpenAPIClientAPI.Collection

extension OpenAPIClientAPI {

public struct Collection: Codable, JSONEncodable, Hashable {

    /** The unique identifier for the collection entity. */
    public var id: String
    /** The unique identifier that can be provided by game studio. */
    public var uniqueId: String
    /** The name of the collection. */
    public var name: String
    /** A brief description of the collection. */
    public var description: String
    /** An image representing the collection's logo. */
    public var logoImage: String
    /** Additional images associated with the collection, such as screenshots or promotional images. */
    public var medias: [String]
    /** The main or featured image associated with the game. You can set it from the dashboard as main image. */
    public var mainMedia: String
    /** A unique URL for the collection on the L3vels platform. */
    public var url: String
    /** A URL link to the collection's webpage. */
    public var webLink: String
    /** The supply represents the number of assets that are available within the Collection. */
    public var supply: Double
    /** Custom properties that are unique to the collection and defined by the developer to categorize and filter them. */
    public var customPropertyProps: AnyCodable
    /** Additional social links associated with the collection */
    public var socialLinks: [String]
    /** Custom assets fields associated with the collection. */
    public var customAssetProps: AnyCodable
    /** The category or categories that the collection belongs to. */
    public var categories: AnyCodable
    /** The current status of the collection. Possible values are: Draft, Active */
    public var status: String
    /** The unique identifier of the account that the Collection belongs to. */
    public var accountId: String
    /** The unique identifier of the game that the collection is associated with. This allows developers to organize their collections by game and helps with tracking and reporting. */
    public var gameId: String
    /** The date when the collection was created. */
    public var createdOn: Date
    /** The date when the collection was last modified. */
    public var modifiedOn: Date
    /** The Id of the user who created the collection. */
    public var createdBy: String
    /** The Id of the user who last modified the collection. */
    public var modifiedBy: String

    public init(id: String, uniqueId: String, name: String, description: String, logoImage: String, medias: [String], mainMedia: String, url: String, webLink: String, supply: Double, customPropertyProps: AnyCodable, socialLinks: [String], customAssetProps: AnyCodable, categories: AnyCodable, status: String, accountId: String, gameId: String, createdOn: Date, modifiedOn: Date, createdBy: String, modifiedBy: String) {
        self.id = id
        self.uniqueId = uniqueId
        self.name = name
        self.description = description
        self.logoImage = logoImage
        self.medias = medias
        self.mainMedia = mainMedia
        self.url = url
        self.webLink = webLink
        self.supply = supply
        self.customPropertyProps = customPropertyProps
        self.socialLinks = socialLinks
        self.customAssetProps = customAssetProps
        self.categories = categories
        self.status = status
        self.accountId = accountId
        self.gameId = gameId
        self.createdOn = createdOn
        self.modifiedOn = modifiedOn
        self.createdBy = createdBy
        self.modifiedBy = modifiedBy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case uniqueId = "unique_id"
        case name
        case description
        case logoImage = "logo_image"
        case medias
        case mainMedia = "main_media"
        case url
        case webLink = "web_link"
        case supply
        case customPropertyProps = "custom_property_props"
        case socialLinks = "social_links"
        case customAssetProps = "custom_asset_props"
        case categories
        case status
        case accountId = "account_id"
        case gameId = "game_id"
        case createdOn = "created_on"
        case modifiedOn = "modified_on"
        case createdBy = "created_by"
        case modifiedBy = "modified_by"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(uniqueId, forKey: .uniqueId)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(logoImage, forKey: .logoImage)
        try container.encode(medias, forKey: .medias)
        try container.encode(mainMedia, forKey: .mainMedia)
        try container.encode(url, forKey: .url)
        try container.encode(webLink, forKey: .webLink)
        try container.encode(supply, forKey: .supply)
        try container.encode(customPropertyProps, forKey: .customPropertyProps)
        try container.encode(socialLinks, forKey: .socialLinks)
        try container.encode(customAssetProps, forKey: .customAssetProps)
        try container.encode(categories, forKey: .categories)
        try container.encode(status, forKey: .status)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(gameId, forKey: .gameId)
        try container.encode(createdOn, forKey: .createdOn)
        try container.encode(modifiedOn, forKey: .modifiedOn)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(modifiedBy, forKey: .modifiedBy)
    }
}

}
