//
// Player.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "OpenAPIClientAPI.Player")
public typealias Player = OpenAPIClientAPI.Player

extension OpenAPIClientAPI {

public struct Player: Codable, JSONEncodable, Hashable {

    /** The unique identifier for the Player entity. */
    public var id: String
    /** The unique ID of the Player that can be provided by customers or generated by us. */
    public var uniqueId: String
    /** The name of the player */
    public var name: String
    /** Username of the player */
    public var username: String
    /** Email of the player */
    public var email: String
    /** Avatar URL of the player */
    public var avatar: String
    /** Custom props for player */
    public var customProps: AnyCodable
    /** The date when player was active last time */
    public var lastSeen: Date
    /** The unique identifier of the account that the Player belongs to. */
    public var accountId: Double
    /** The unique identifier of the project that the Player is associated with. This allows developers to organize their players by project and helps with tracking and reporting. Example: Player Jack is associated with project Fortnite. */
    public var projectId: String
    /** The date when the player was created. */
    public var createdOn: Date
    /** The date when the player was last modified. */
    public var modifiedOn: Date
    /** The Id of the user who created the player. */
    public var createdBy: Double
    /** The Id of the user who last modified the player. */
    public var modifiedBy: Double
    /** Boolean value indicating whether the player has wallet or not */
    public var isCreateWallet: Bool

    public init(id: String, uniqueId: String, name: String, username: String, email: String, avatar: String, customProps: AnyCodable, lastSeen: Date, accountId: Double, projectId: String, createdOn: Date, modifiedOn: Date, createdBy: Double, modifiedBy: Double, isCreateWallet: Bool) {
        self.id = id
        self.uniqueId = uniqueId
        self.name = name
        self.username = username
        self.email = email
        self.avatar = avatar
        self.customProps = customProps
        self.lastSeen = lastSeen
        self.accountId = accountId
        self.projectId = projectId
        self.createdOn = createdOn
        self.modifiedOn = modifiedOn
        self.createdBy = createdBy
        self.modifiedBy = modifiedBy
        self.isCreateWallet = isCreateWallet
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case uniqueId = "unique_id"
        case name
        case username
        case email
        case avatar
        case customProps = "custom_props"
        case lastSeen = "last_seen"
        case accountId = "account_id"
        case projectId = "project_id"
        case createdOn = "created_on"
        case modifiedOn = "modified_on"
        case createdBy = "created_by"
        case modifiedBy = "modified_by"
        case isCreateWallet = "is_create_wallet"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(uniqueId, forKey: .uniqueId)
        try container.encode(name, forKey: .name)
        try container.encode(username, forKey: .username)
        try container.encode(email, forKey: .email)
        try container.encode(avatar, forKey: .avatar)
        try container.encode(customProps, forKey: .customProps)
        try container.encode(lastSeen, forKey: .lastSeen)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(createdOn, forKey: .createdOn)
        try container.encode(modifiedOn, forKey: .modifiedOn)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(modifiedBy, forKey: .modifiedBy)
        try container.encode(isCreateWallet, forKey: .isCreateWallet)
    }
}

}
