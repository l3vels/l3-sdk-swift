//
// Project.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "OpenAPIClientAPI.Project")
public typealias Project = OpenAPIClientAPI.Project

extension OpenAPIClientAPI {

public struct Project: Codable, JSONEncodable, Hashable {

    /** The unique identifier for the Game entity. */
    public var id: String
    /** The name of the Game. */
    public var name: String
    /** A brief description of the Game. */
    public var description: String
    /** The category or genre of the Game. */
    public var category: String
    /** The logo or icon associated with the Game. */
    public var logoImage: String
    /** Additional images associated with the collection, such as screenshots or promotional images. */
    public var medias: [String]
    /** Additional social links associated with the collection */
    public var socialLinks: [String]
    /** The main or featured image associated with the Game. You can set it from the Dashboard as main image. */
    public var mainMedia: String
    /** A unique URL for the game on the L3vels platform. */
    public var url: String
    /** The URL for the Game's website or landing page. */
    public var webLink: String
    /** The link to the Game's Discord server. */
    public var discord: String
    /** The link to the Game's official Twitter account. */
    public var twitter: String
    /** The link to the Game's official Instagram account. */
    public var instagram: String
    /**  A phone number for contacting the Game's developers or support team. */
    public var contactPhone: String
    /** An email address for contacting the Game's developers or support team. */
    public var contactEmail: String
    /** The current status of the Game, such as \"Draft\", \"Active\", or \"Inactive\". */
    public var status: String
    /**  The unique identifier of the account that the Game belongs to. This allows developers to manage multiple Games across multiple accounts. */
    public var accountId: Double
    /** The date and time that the Game entity was created. */
    public var createdOn: Date
    /** The date and time that the Game entity was last modified. */
    public var modifiedOn: Date
    /** The user or system that created the Game entity. */
    public var createdBy: Double
    /** The user or system that last modified the Game entity. */
    public var modifiedBy: Double

    public init(id: String, name: String, description: String, category: String, logoImage: String, medias: [String], socialLinks: [String], mainMedia: String, url: String, webLink: String, discord: String, twitter: String, instagram: String, contactPhone: String, contactEmail: String, status: String, accountId: Double, createdOn: Date, modifiedOn: Date, createdBy: Double, modifiedBy: Double) {
        self.id = id
        self.name = name
        self.description = description
        self.category = category
        self.logoImage = logoImage
        self.medias = medias
        self.socialLinks = socialLinks
        self.mainMedia = mainMedia
        self.url = url
        self.webLink = webLink
        self.discord = discord
        self.twitter = twitter
        self.instagram = instagram
        self.contactPhone = contactPhone
        self.contactEmail = contactEmail
        self.status = status
        self.accountId = accountId
        self.createdOn = createdOn
        self.modifiedOn = modifiedOn
        self.createdBy = createdBy
        self.modifiedBy = modifiedBy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case description
        case category
        case logoImage = "logo_image"
        case medias
        case socialLinks = "social_links"
        case mainMedia = "main_media"
        case url
        case webLink = "web_link"
        case discord
        case twitter
        case instagram
        case contactPhone = "contact_phone"
        case contactEmail = "contact_email"
        case status
        case accountId = "account_id"
        case createdOn = "created_on"
        case modifiedOn = "modified_on"
        case createdBy = "created_by"
        case modifiedBy = "modified_by"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(category, forKey: .category)
        try container.encode(logoImage, forKey: .logoImage)
        try container.encode(medias, forKey: .medias)
        try container.encode(socialLinks, forKey: .socialLinks)
        try container.encode(mainMedia, forKey: .mainMedia)
        try container.encode(url, forKey: .url)
        try container.encode(webLink, forKey: .webLink)
        try container.encode(discord, forKey: .discord)
        try container.encode(twitter, forKey: .twitter)
        try container.encode(instagram, forKey: .instagram)
        try container.encode(contactPhone, forKey: .contactPhone)
        try container.encode(contactEmail, forKey: .contactEmail)
        try container.encode(status, forKey: .status)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(createdOn, forKey: .createdOn)
        try container.encode(modifiedOn, forKey: .modifiedOn)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(modifiedBy, forKey: .modifiedBy)
    }
}

}
